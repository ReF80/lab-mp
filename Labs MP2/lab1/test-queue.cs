// Задача: реализовать контейнер-адаптер priority_queue. Принцип работы очереди: первым извлекается наибольший элемент. Контейнер должен
// обеспечивать логарифмическое время работы для добавления и удаления элемента.
//     Рассматриваемые вопросы:
//     – использование композиции;
//     – паттерн проектирования «Адаптер»;
//     – шаблоны с параметрами по умолчанию;
// Указания по выполнению:
//     – лабораторная работа состоит из двух файлов:
// priority-queue.h – описание класса priority_queue, прототипы методов,
// реализация методов;
// test-queue.cpp – тестирование и проверка возможностей класса;
// 2
//     – класс priority_queue содержит два шаблонных параметра: хранимый
// тип данных, используемый контейнер (по умолчанию динамический массив
// стандартной библиотеки)
//     – класс priority_queue содержит одно поле — используемый контейнер;
//     – хранение элементов организовать в виде двоичной кучи (пирамиды);
//     – для определения приоритета элемента пользоваться оператором< или
// эквивалентным методом (compareTo и т.п.);
//     – класс должен содержать следующие методы: проверка очереди на пустоту; получение числа элементов в очереди; добавление элемента в очередь;
// удаление элемента из очереди; доступ к максимальному элементу очереди;
using Labs_MP2.lab1;

class testQueue
{
    public static void testLab1()
    {
        var priorityQueue = new PriorityQueue<int>();
        
        priorityQueue.Enqueue(10);
        priorityQueue.Enqueue(30);
        priorityQueue.Enqueue(20);
        priorityQueue.Enqueue(50);
        priorityQueue.Enqueue(40);
        priorityQueue.Enqueue(15);
        priorityQueue.Enqueue(25);
        priorityQueue.Enqueue(35);
        
        Console.WriteLine($"Количество элементов в очереди: {priorityQueue.Count()}");
        Console.WriteLine($"Максимальный элемент: {priorityQueue.Peek()}");
        Console.WriteLine($"Извлеченный элемент: {priorityQueue.Dequeue()}");
        Console.WriteLine($"Количество элементов после очистки: {priorityQueue.Count()}");
    }
}