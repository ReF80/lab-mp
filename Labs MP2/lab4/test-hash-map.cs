// Задача: реализовать ассоциативный массив (контейнер hash_map) на основе хеш-таблицы с разрешением коллизий по методу цепочек на языке программирования C#.
// Рассматриваемые вопросы:
//     – хеш-функции и хеш-таблицы;
//     – методы разрешения коллизий;
//     – амортизационные оценки сложности;
// Указания по выполнению:
//     – лабораторная работа состоит из двух файлов:
//          hash-map.h – описание класса hash_map, прототипы методов, реализация методов;
//          test-hash-map.cpp – тестирование и проверка возможностей класса;
//     – класс hash_map содержит три шаблонных параметра: тип ключа K; тип значения V; тип функции хеширования (по умолчанию стандартная функция
//          используемого языка);
//     – каждый элемент контейнера – пара ключ-значение;
//     – для хранения элементов воспользоваться стандартными контейнерами динамический массив и связный список;
//     – класс hash_map содержит следующие поля:
//          вектор со списками элементов;
//          число элементов;
//          число списков;
//          вещественный коэффициент – максимальный уровень загруженности (по умолчанию равен 2.0);
//      – класс hash_map должен содержать следующие методы:
//          конструктор;
//          удаление всех элементов;
//          добавление пары ключ-значение;
//          оператор[ ] или соотв. метод – получает ключ, возвращает ссылку на значение;
//          удаление элемента по ключу;
//          получение числа элементов;
//          получение и изменение коэффициента загруженности;
//          получение текущего уровня загруженности (число всех элементов к числу всех списков);
//          перехеширование всех элементов;
//     – если текущий уровень загруженности превышает максимально допустимый, выполнять перехеширование контейнера, увеличив его размер по формуле 2 · size + 1;
//     – при добавлении элемента e выбирать список по формуле: hash(e) mod (число списков);
//     – метод перехеширования получает новое число списков, изменяет размер
//     вектора, перераспределяет все элементы по спискам согласно формуле. Данный метод сделать закрытым. Не изменять состояние контейнера, если новое
//     число списков меньше текущего;

namespace Labs_MP2.lab4;

public class test_hash_map
{
    public static void TestHashMap()
    {
        HashMap<string, int> hashMap = new HashMap<string, int>(5, 2.0);

        // Добавление элементов
        hashMap.Add("apple", 5);
        hashMap.Add("banana", 3);
        hashMap.Add("cherry", 7);

        // Получение значений
        Console.WriteLine($"Value for 'apple': {hashMap["apple"]}");
        Console.WriteLine($"Value for 'banana': {hashMap["banana"]}");

        // Изменение значения
        hashMap["apple"] = 10;
        Console.WriteLine($"Updated value for 'apple': {hashMap["apple"]}");

        // Проверка наличия ключа
        if (hashMap.TryGetValue("cherry", out int cherryValue))
            Console.WriteLine($"Value for 'cherry': {cherryValue}");
        else
            Console.WriteLine("Key 'cherry' not found.");

        // Удаление элемента
        if (hashMap.Remove("banana"))
            Console.WriteLine("Removed 'banana'.");
        else
            Console.WriteLine("Key 'banana' not found.");

        // Попытка получить удаленный ключ
        try
        {
            Console.WriteLine($"Value for 'banana': {hashMap["banana"]}");
        }
        catch (KeyNotFoundException e)
        {
            Console.WriteLine(e.Message);
        }

        // Информация о состоянии хеш-таблицы
        Console.WriteLine($"Number of elements: {hashMap.Count}");
        Console.WriteLine($"Load factor: {hashMap.LoadFactor:F2}");
        Console.WriteLine($"Max load factor: {hashMap.MaxLoadFactor:F2}");

        // Изменение коэффициента загруженности
        hashMap.MaxLoadFactor = 1.5;
        Console.WriteLine($"Updated max load factor: {hashMap.MaxLoadFactor:F2}");
    }
}