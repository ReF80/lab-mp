// Задача: реализовать ассоциативный массив (контейнер map) на основе
// двоичного дерева поиска (красно-черного). Каждый узел двоичного дерева должен содержать пару ключ-значение. Пользователь должен иметь
// возможность: получить значение по ключу, изменить значение по ключу, добавить в контейнер новую пару.
//     Рассматриваемые вопросы:
//     – двоичное дерево поиска, красно-черное дерево, AVL-дерево;
//     – паттерн проектирования «Итератор»;
// Указания по выполнению:
//     – лабораторная работа состоит из двух файлов:
// map.h – описание класса map, прототипы методов, реализация методов;
// test-map.cpp – тестирование и проверка возможностей класса;
//     – создать вспомогательную шаблонную структуру node, содержащую поле
//     для хранения значения произвольного типа и 3 поля для хранения указателей
// на родителя и левого/правого потомков;
//     – создать шаблонный класс comparator – функтор, который принимает
// два аргумента произвольного типа, возвращает логическое значение: true,
// если первый аргумент меньше; false в противном случае. Реализация данного
// класса может быть опущена при отсутствии языковой поддержки;
//     – класс map содержит три шаблонных параметра: тип ключа; тип значения; тип критерия сравнения (по умолчанию comparator);
//     – каждый узел дерева в поле данных содержит пару ключ-значение;
//     – класс map содержит одно поле – указатель на узел, являющийся корнем дерева.
//     – класс map должен содержать следующие методы:
// конструктор, деструктор;
// конструктор копирования;
// копирующий оператор присваивания;
// проверка на пустоту; 
//     удаление всех элементов;
//     добавление пары ключ-значение;
//     оператор[ ] или соотв. метод – получает ключ, возвращает ссылку на значение;
// поиск по ключу – возвращает логическое значение или итератор;


namespace Labs_MP2.lab2;

public class test_map
{
    public static void testMap()
    {
        var map = new Map<int, string>();
        
        map.Add(1, "One");
        map.Add(2, "Two");
        map.Add(3, "Three");
        
        Console.WriteLine(map[1]); 
        Console.WriteLine(map[2]); 
        
        map[2] = "New Two";
        Console.WriteLine(map[2]); 
        
        Console.WriteLine(map.ContainsKey(3)); 
        Console.WriteLine(map.ContainsKey(4));
        
        map.Clear();
        Console.WriteLine(map.IsEmpty());
    }
}