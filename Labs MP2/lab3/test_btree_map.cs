// Задача: реализовать ассоциативный массив (контейнер btree_map) на основе B-дерева. Каждый узел дерева должен содержать
// набор пар ключзначение. Пользователь должен иметь возможность: получить значение по ключу, изменить значение по ключу, добавить в контейнер новую пару.
//     Рассматриваемые вопросы:
//     – деревья поиска во внешней памяти, B-дерево;
// Указания по выполнению:
//     – лабораторная работа состоит из двух файлов:
// btree_map.h – описание класса btree_map, прототипы методов, реализация методов;
// test-map.cpp – тестирование и проверка возможностей класса;
//     – создать вспомогательную шаблонную структуру node, содержащую два
//         поля (контейнер с парами {ключ, значение}, контейнер с указателями на дочерние структуры node);
//     – создать шаблонный класс comparator – функтор, который принимает два аргумента произвольного типа, возвращает логическое значение: true,
//          если первый аргумент меньше; false в противном случае. Реализация данного класса может быть опущена при отсутствии языковой поддержки;
//     – класс btree_map содержит три шаблонных параметра: тип ключа; тип значения; тип критерия сравнения (по умолчанию comparator);
//     – класс btree_map содержит два поля (указатель на узел, являющийся корнем дерева; параметр t ≥ 2);
//     – класс btree_map должен содержать следующие методы:
// конструктор;
// конструктор копирования;
// копирующий оператор присваивания;
// проверка на пустоту;
// удаление всех элементов;
// добавление пары ключ-значение;
// оператор[ ] или соотв. метод – получает ключ, возвращает ссылку на значение;
// поиск по ключу – возвращает логическое значение или итератор;
//     – при необходимости разделять методы на интерфейс и реализацию;
//     – параметр t (минимальная степень B-дерева) определяется в конструкторе и не меняется в процессе работы;
//     – для поиска ключа в структуре node использовать двоичный поиск.

namespace Labs_MP2.lab3;
public class test_btree_map
{
    public static void testBtreeMap()
    {
        var btreeMap = new BTreeMap<string, int>(3); // Минимальная степень t = 3

        // Добавление элементов
        btreeMap.Add("apple", 5);
        btreeMap.Add("banana", 3);
        btreeMap.Add("cherry", 7);
        btreeMap.Add("date", 10);
        btreeMap.Add("elderberry", 15);

        // Получение значений
        Console.WriteLine($"Value for 'apple': {btreeMap["apple"]}");
        Console.WriteLine($"Value for 'banana': {btreeMap["banana"]}");

        // Изменение значения
        btreeMap["apple"] = 10;
        Console.WriteLine($"Updated value for 'apple': {btreeMap["apple"]}");

        // Проверка наличия ключа
        Console.WriteLine($"Contains 'cherry': {btreeMap.ContainsKey("cherry")}");
        Console.WriteLine($"Contains 'grape': {btreeMap.ContainsKey("grape")}");

        // Удаление всех элементов
        btreeMap.Clear();
        Console.WriteLine($"Is empty after clear: {btreeMap.IsEmpty()}");
    }
}